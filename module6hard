class Figura:
    def __init__(self, sides_count=0):
        self.sides_count = sides_count
        self.__sides = []
        self.__color = []
        self.filled = False

    def get_color(self):
        return self.__color

    def __is_valid_color(self, r, g, b):
        if 0 < r <= 255 and 0 < g <= 255 and 0 < b <= 255:
            return r, g, b
        else:
            return self.__color

    def set_color(self, r, g, b):
        new_color = self.__is_valid_color(r, g, b)
        self.__color = list(new_color)
        return self.__color

    def __is_valid_sides(self, *sides):
        if len(sides) != self.sides_count:
            return False
        for side in sides:
            if side <= 0:
                return False
        return True

    def get_sides(self):
        return self.__sides

    def __len__(self):
        return len(self.__sides)

    def set_sides(self, *new_sides):
        for j in new_sides:
            if j != self.__is_valid_sides(j):
                self.__sides = list(new_sides)
                return self.__sides

class Circle(Figura):
    def __init__(self, radius=0):
        super().__init__(sides_count=1)
        self.__radius = radius / 2

    def get_square(self):
        return 3.14 * (self.__radius ** 2)


class Triangle(Figura):
    def __init__(self):
        super().__init__(sides_count=3)
        self.__base = 0
        self.__height = 0

    def get_square(self):
        return (self.__base * self.__height) / 2

class Cube(Figura):
    def __init__(self, side=1):
        super().__init__(sides_count=12)
        self.__side = side

    def get_sides(self):
        return [self.__side] * 12

    def get_volume(self):
        return self.__side ** 3

    def set_sides(self, side):
        if side <= 0:
            return
        self.__side = side
